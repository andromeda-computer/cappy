diff --git a/dist/lib/renderers/rsc-renderer.js b/dist/lib/renderers/rsc-renderer.js
index ab476547fa8bb04105aea1ce63eb8307045b5da6..367800f28629e13d42d3d94fc9e6547f7fbe3021 100644
--- a/dist/lib/renderers/rsc-renderer.js
+++ b/dist/lib/renderers/rsc-renderer.js
@@ -1,7 +1,7 @@
 import { filePathToFileURL } from '../utils/path.js';
-import { parseFormData } from '../utils/form.js';
-import { streamToString } from '../utils/stream.js';
+import { streamToArrayBuffer } from '../utils/stream.js';
 import { decodeActionId } from '../renderers/utils.js';
+import { bufferToFormData, bufferToString } from 'hono/utils/buffer';
 export const SERVER_MODULE_MAP = {
     'rsdw-server': 'react-server-dom-webpack/server.edge',
     'waku-server': 'waku/server'
@@ -116,12 +116,13 @@ export async function renderRsc(args, opts) {
     };
     let decodedBody = args.decodedBody;
     if (body) {
-        const bodyStr = await streamToString(body);
+        const bodyBuf = await streamToArrayBuffer(body);
         if (typeof contentType === 'string' && contentType.startsWith('multipart/form-data')) {
             // XXX This doesn't support streaming unlike busboy
-            const formData = parseFormData(bodyStr, contentType);
+            const formData = await bufferToFormData(bodyBuf, contentType);
             decodedBody = await decodeReply(formData, serverBundlerConfig);
-        } else if (bodyStr) {
+        } else if (bodyBuf.byteLength > 0) {
+            const bodyStr = bufferToString(bodyBuf);
             decodedBody = await decodeReply(bodyStr, serverBundlerConfig);
         }
     }
diff --git a/dist/lib/utils/form.d.ts b/Users/cj/.bun/install/cache/waku@0.21.0@@@1/dist/lib/utils/form.d.ts
deleted file mode 100644
index fcd8fbdda25656157a71a4163bb7fb42ecb38cbd..0000000000000000000000000000000000000000
diff --git a/dist/lib/utils/form.js b/Users/cj/.bun/install/cache/waku@0.21.0@@@1/dist/lib/utils/form.js
deleted file mode 100644
index b5d007c59b61c6c5b72ee00e52add9323953dcfc..0000000000000000000000000000000000000000
diff --git a/dist/lib/utils/stream.d.ts b/dist/lib/utils/stream.d.ts
index 81db779be9fcdb79bbb6fa6b0c042b600746863f..7bcb354a79be20b174180329775210a659129f20 100644
--- a/dist/lib/utils/stream.d.ts
+++ b/dist/lib/utils/stream.d.ts
@@ -1,3 +1,4 @@
 export declare const concatUint8Arrays: (arrs: Uint8Array[]) => Uint8Array;
+export declare const streamToArrayBuffer: (stream: ReadableStream) => Promise<ArrayBufferLike>;
 export declare const streamToString: (stream: ReadableStream) => Promise<string>;
 export declare const stringToStream: (str: string) => ReadableStream;
diff --git a/dist/lib/utils/stream.js b/dist/lib/utils/stream.js
index 116b0793619948914eaef2f1cd8ceec33404600c..612437de0b7bd19ebf015605eaa4c072e2a0fca6 100644
--- a/dist/lib/utils/stream.js
+++ b/dist/lib/utils/stream.js
@@ -9,6 +9,27 @@ export const concatUint8Arrays = (arrs)=>{
     }
     return array;
 };
+export const streamToArrayBuffer = async (stream)=>{
+    const reader = stream.getReader();
+    const chunks = [];
+    let totalSize = 0;
+    let done = false;
+    let value;
+    do {
+        ({ done, value } = await reader.read());
+        if (!done && value) {
+            chunks.push(value);
+            totalSize += value.length;
+        }
+    }while (!done)
+    const result = new Uint8Array(totalSize);
+    let offset = 0;
+    for (const chunk of chunks){
+        result.set(chunk, offset);
+        offset += chunk.length;
+    }
+    return result.buffer;
+};
 export const streamToString = async (stream)=>{
     const decoder = new TextDecoder();
     const reader = stream.getReader();
